# Adding an "else: return False" will halt the function after just one iteration because a True or a False value will be returned. 

# Solution: 
# Let the FOR loop iterate to the end if no matching letter is found. Then the function will proceed to the next line and read "return False" upon which it will halt. 

def letter_check(word, letter):
  for character in word:
    if character == letter:
      return True
  return False

print(letter_check("strawberry", "a"))
print(letter_check("strawberry", "o")) 


# "in" checks if one string is part of another string 
# "letter" in "word" is a boolean expression 

def contains(big_string, little_string): 
  return little_string in big_string 

print(contains("watermelon", "melon")) 
print(contains("watermelon", "berry")) 

# Find the unique letters that are common to both strings. 
def common_letters(string_one, string_two): 
  lst = []
  for letter in string_one: 
    if (letter in string_two) and (letter not in lst): 
      lst.append(letter)
  return lst 
      
print(common_letters('banana', 'cream'))


# Generate username given the first and last names of a user. 
def username_generator(first_name, last_name):
  username = first_name[:3] + last_name[:4]
  return username  

print(username_generator("Abe", "Simpson")) 



# Create a temporary password based on the username by shifting the letters right. 

user_username = username_generator("Abe", "Simpson")

def password_generator(username, password = ""): 
  for index in range(len(username)): 
    password += (username[index - 1])
  return password 

print(password_generator(user_username))


# Formatting methods: strings 
poem_title = "spring storm"
poem_author = "William Carlos Williams"

poem_title_fixed = poem_title.title() 

print(poem_title)
print(poem_title_fixed) 

poem_author_fixed = poem_author.upper()
print(poem_author)
print(poem_author_fixed

# Split a string into substrings using .split(). 
line_one = "The sky has given over"
line_one_words = line_one.split()
print(line_one_words) 


# Return only the last names given all authors' first and last names in the form of a string.

authors = "Audre Lorde,Gabriela Mistral,Jean Toomer,An Qi,Walt Whitman,Shel Silverstein,Carmen Boullosa,Kamala Suraiyya,Langston Hughes,Adrienne Rich,Nikki Giovanni"

author_names = authors.split(',')
print(author_names)

author_last_names = [] 

for name in author_names: 
  first_last_names = name.split() 
  author_last_names.append(first_last_names[-1])

print(author_last_names) 


# Split a multi-line string into substrings using a new line \
as the delimiter. 


spring_storm_text = \
"""The sky has given over 
its bitterness. 
Out of the dark change 
all day long 
rain falls and falls 
as if it would never end. 
Still the snow keeps 
its hold on the ground. 
But water, water 
from a thousand runnels! 
It collects swiftly, 
dappled with black 
cuts a way for itself 
through green ice in the gutters. 
Drop after drop it falls 
from the withered grass-stems 
of the overhanging embankment."""

spring_storm_lines = spring_storm_text.split('\n')
print(spring_storm_lines) 


# Join substrings into one.  
reapers_line_one_words = ["Black", "reapers", "with", "the", "sound", "of", "steel", "on", "stones"]

reapers_line_one = ' '.join(reapers_line_one_words) 


print(reapers_line_one)

# Reformat the lines of a poem using .strip() and .join() 
love_maybe_lines = ['Always    ', '     in the middle of our bloodiest battles  ', 'you lay down your arms', '           like flowering mines    ','\n' ,'   to conquer me home.    ']

print(love_maybe_lines)
print('\n')
love_maybe_lines_stripped = []

for line in love_maybe_lines: 
  love_maybe_lines_stripped.append(line.strip())

print(love_maybe_lines_stripped) 
print('\n')
love_maybe_full = '\n'.join(love_maybe_lines_stripped)

print(love_maybe_full)

# Replace all instances of 'Tomer' with 'Toomer'. 
toomer_bio = \
"""
Nathan Pinchback Tomer, who adopted the name Jean Tomer early in his literary career, was born in Washington, D.C. in 1894. Jean is the son of Nathan Tomer was a mixed-race freedman, born into slavery in 1839 in Chatham County, North Carolina. Jean Tomer is most well known for his first book Cane, which vividly portrays the life of African-Americans in southern farmlands.
"""

toomer_bio_fixed = toomer_bio.replace('Tomer', 'Toomer')


# Find the index where the word first appears in the sentence. 
god_wills_it_line_one = "The very earth will disown you"

disown_placement = god_wills_it_line_one.find('disown') 

print(disown_placement)

# Include variables in a string using the format method. 
def poem_title_card(title, poet): 
  return "The poem \"{}\" is written by {}.".format(title, poet) 

title = "I Hear America Singing"
poet = "Walt Whitman"
print(poem_title_card(title, poet)) 

# Assign keywords to the placeholders inside the string and in the format method's parameters. 
def poem_description(publishing_date, author, title, original_work):
  poem_desc = "The poem {title} by {author} was originally published in {original_work} in {publishing_date}.".format(publishing_date=publishing_date, author=author, title=title, original_work=original_work)
  return poem_desc

my_beard_description = poem_description(1974, "Shel Silverstein", "My Beard", "\"Where the Sidewalk Ends\"") 
print(my_beard_description)  

############################################
# Print poem details on a new line for each poem in the list after formatting. 

highlighted_poems = "Afterimages:Audre Lorde:1997,  The Shadow:William Carlos Williams:1915, Ecstasy:Gabriela Mistral:1925,   Georgia Dusk:Jean Toomer:1923,   Parting Before Daybreak:An Qi:2014, The Untold Want:Walt Whitman:1871, Mr. Grumpledump's Song:Shel Silverstein:2004, Angel Sound Mexico City:Carmen Boullosa:2013, In Love:Kamala Suraiyya:1965, Dream Variations:Langston Hughes:1994, Dreamwood:Adrienne Rich:1987"

print("Original list of poems")
print(highlighted_poems)
highlighted_poems_list = highlighted_poems.split(',')
print('\n')

highlighted_poems_stripped = []
for poem in highlighted_poems_list: 
  highlighted_poems_stripped.append(poem.strip(' '))

print(highlighted_poems_stripped)
print('\n')

highlighted_poems_details = [] 

for poem in highlighted_poems_stripped: 
  highlighted_poems_details.append(poem.split(':'))

print("Note: Each poem's info is split into three substrings contained inside its own list.")
print('\n')
print(highlighted_poems_details)

titles = []
poets = [] 
dates = [] 

for poem in highlighted_poems_details: 
    titles.append(poem[0]) 
    poets.append(poem[1]) 
    dates.append(poem[2])

def print_poem(title, poet, date): 
  poem_details = "The poem {title} was published by {poet} in {date}.".format(title=title, poet=poet, date=date) 
  return poem_details


# Print poem details using the format method or an f-string.

for i in range(len(titles)): 
  # print(print_poem(titles[i], poets[i], dates[i]))
  print(f'The poem {titles[i]} was published by {poets[i]} in {dates[i]}.')
  print('\n')




